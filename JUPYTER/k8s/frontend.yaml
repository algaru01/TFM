apiVersion: v1
kind: Pod
metadata:
  name: frontend
  labels:
    app: my-app
spec:
  containers:
  - name: frontend
    image: agalrui/debian-ipython-fn
    # command: [ /bin/sh ]
    # args: [-c,while true;do sleep 20;done]
      

    volumeMounts:
    - name: frontend-volume
      mountPath: /home/jupyter/.ipython/profile_default/security/
  volumes:
  - name: frontend-volume
    configMap:
      defaultMode: 0777
      name: ipythonconf-fn
      items:
      - key: ipcontroller-engine.json
        path: ipcontroller-engine.json
      - key: ipcontroller-client.json
        path: ipcontroller-client.json

---

apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app: my-app
  ports:
    - name: registration
      protocol: TCP
      port: 58173
      targetPort: 58173

    - name: control
      protocol: TCP
      port: 36827
      targetPort: 36827

    - name: mux
      protocol: TCP
      port: 51387
      targetPort: 51387

    - name: task
      protocol: TCP
      port: 33439
      targetPort: 33439

    - name: iopub
      protocol: TCP
      port: 33613
      targetPort: 33613

    - name: hb-ping
      protocol: TCP
      port: 34595
      targetPort: 34595

    - name: hb-pong
      protocol: TCP
      port: 56171
      targetPort: 56171

    - name: broadcast1
      protocol: TCP
      port: 59031
      targetPort: 59031

    - name: broadcast2
      protocol: TCP
      port: 56287
      targetPort: 56287

    - name: jupyter
      protocol: TCP
      port: 80
      targetPort: 8888


---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jupyter-ingress
spec:
  rules:
  - http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: my-service  # Nombre del servicio que quieres exponer
            port:
              number: 80  # Puerto del servicio Jupyter

